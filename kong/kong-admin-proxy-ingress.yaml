---
apiVersion: v1
kind: Service
metadata:
  name: kong-admin
  namespace: default
spec:
  type: ClusterIP
  ports:
  - name: kong-admin
    port: 8001
    targetPort: 8001
    protocol: TCP
  selector:
    app: kong-admin
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: kong-admin
  name: kong-admin
  namespace: default
spec:
  selector:
    matchLabels:
      app: kong-admin
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: kong-admin
    spec:
      containers:
      - name: admin-api
        image: kong:1.0.0-alpine
        env:
        - name: KONG_DATABASE
          value: postgres
        - name: KONG_PG_DATABASE
          valueFrom:
            secretKeyRef:
              name: kongcreds
              key: postgresdbname
        - name: KONG_PG_USER
          valueFrom:
            secretKeyRef:
              name: kongcreds
              key: username
        - name: KONG_PG_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kongcreds
              key: password          
        - name: KONG_PG_HOST
          value: kong-postgres
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_ADMIN_ACCESS_LOG
          value: /dev/stdout
        - name: KONG_ADMIN_ERROR_LOG
          value: /dev/stderr
        - name: KONG_ADMIN_LISTEN
          value: 0.0.0.0:8001
        - name: KONG_PROXY_LISTEN
          value: 'off'
        ports:
        - name: kong-admin-port
          containerPort: 8001
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /status
            port: 8001
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 3
---
apiVersion: v1
kind: Service
metadata:
  name: kong-ingress-controller
  namespace: default
spec:
  type: ClusterIP
  ports:
  - name: kong-ingress
    port: 10254
    targetPort: 10254
    protocol: TCP
  selector:
    app: kong-ingress-controller
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: kong-ingress-controller
  name: kong-ingress-controller
  namespace: default
spec:
  selector:
    matchLabels:
      app: kong-ingress-controller
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
      labels:
        app: kong-ingress-controller
    spec:
      serviceAccountName: kong-service-account
      containers:
      - name: kong-ingress-controller
        args:
        - /kong-ingress-controller
        - --kong-url=http://kong-admin.default:8001
        - --default-backend-service=default/kong-proxy
        - --publish-service=default/kong-proxy
        - --ingress-class=kong
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: kong-docker-kubernetes-ingress-controller.bintray.io/kong-ingress-controller:0.3.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 3
---
apiVersion: v1
kind: Service
metadata:
  name: kong-proxy
  namespace: default
  labels:
    app: kong-proxy
  annotations:
    external-dns.alpha.kubernetes.io/hostname: " {{ .kongProxyDNS }} "
    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: "app=kong-proxy"
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
spec:
  externalTrafficPolicy: Local
  type: LoadBalancer
  ports:
  - name: kong-proxy-ssl
    port: 443
    targetPort: 8443
    protocol: TCP
  selector:
    app: kong-proxy
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kong-proxy
  namespace: default
spec:
  replicas: 3
  template:
    metadata:
      labels:
        name: kong-proxy
        app: kong-proxy
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - kong-proxy
              topologyKey: kubernetes.io/hostname
      containers:
      - name: kong-proxy
        image: kong:1.0.0-alpine
        env:
        - name: KONG_DATABASE
          value: postgres
        - name: KONG_PG_DATABASE
          valueFrom:
            secretKeyRef:
              name: kongcreds
              key: postgresdbname
        - name: KONG_PG_USER
          valueFrom:
            secretKeyRef:
              name: kongcreds
              key: username
        - name: KONG_PG_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kongcreds
              key: password
        - name: KONG_PG_HOST
          value: kong-postgres
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_LISTEN
          value: 'off'
        ports:
        - name: proxy
          containerPort: 8000
          protocol: TCP
        - name: proxy-ssl
          containerPort: 8443
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - kong
            - health
        livenessProbe:
          exec:
            command:
            - kong
            - health
